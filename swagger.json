{
  "openapi": "3.0.3",
  "info": {
    "title": "Kroger API Reference",
    "description": "# Introduction\nThe following APIs are publicly available to allow new clients to build products, \nservices, or customer experiences that leverage the unique data, functions, and \napplications of Kroger. As a company that strives to empower the developer community \nand meet our customers where they are, we are offering these APIs as the first \nstep to building an ecosystem that promotes speed, simplicity, and security.\n<br><br>\nAll Public APIs provide access to the following Kroger subsidiaries:\n<ul>\n<li>Kroger</li>\n<li>Bakers</li>\n<li>City Market</li>\n<li>Dillons</li>\n<li>Food 4 Less</li>\n<li>Foods Co</li>\n<li>Fred Meyer</li>\n<li>Fry's</li>\n<li>Gerbes</li>\n<li>JayC</li>\n<li>King Soopers</li>\n<li>Metro Market</li>\n<li>Owen's</li>\n<li>Pay Less</li>\n<li>Pick 'n Save</li>\n<li>QFC</li>\n<li>Ralphs</li>\n<li>Smith's</li>\n</ul>\n<br><br>\nTo begin using our Public APIs, see the <a href=\"https://developer.kroger.com/documentation/public/getting-started/quick-start\">Getting Started</a> documentation. \n\n# Environments\n\nDuring registration, we require apps to be registered for environments individually. Use one of the following paths based on the environment you selected for your application during the registration process.\n\n| Environment | Path |\n|-------------|------|\n|Production | https://api.kroger.com/v1/ |\n|Certification | https://api-ce.kroger.com/v1/ |\n\n# Authentication \nFor API authentication, Kroger uses the OAuth2 protocol ([RFC6749](https://tools.ietf.org/html/rfc6749)), \nsupporting the Authorization Code, Client Credentials, and Refresh Token grant types. If you're unfamiliar \nwith OAuth2, see our [Understanding OAuth2](https://developer.kroger.com/documentation/public/security/guides-oauth)\n documentation.\n\n\n<!-- ReDoc-Inject: <security-definitions> -->\n",
    "termsOfService": "https://developer.kroger.com/terms",
    "contact": {
      "name": "API Support",
      "email": "APISupport@kroger.com"
    },
    "version": "1.2.1"
  },
  "servers": [
    {
      "url": "https://api.kroger.com/v1",
      "description": "Production Environment"
    },
    {
      "url": "https://api-ce.kroger.com/v1",
      "description": "Certification Environment"
    }
  ],
  "security": [
    {
      "CustomerContext": [
        "profile.compact",
        "product.compact",
        "cart.basic:write"
      ]
    },
    {
      "ClientContext": [
        "product.compact"
      ]
    }
  ],
  "tags": [
    {
      "name": "Identity",
      "description": "The Identity API allows you to access the profile ID of an authenticated customer. <br><br>\n### Rate Limit\nThe Public Identity API has a **5,000 call per day** rate limit.\n"
    },
    {
      "name": "Products",
      "description": "The Products API allows you to search the Kroger product catalog. <br><br>\n\n### Rate Limit\n\nThe Public Products API has a **10,000 call per day** rate limit. \n\nFor all Public APIs, we enforce the rate limit by the number of calls the client makes to the endpoint, not individual API operations. This means you can distribute the 10,000 calls across all API operations using the `/products` endpoint as you see fit. <br><br>\n\n### Pagination\n\nThe Product Search operation supports pagination with a default value of 10 results per page. Using the following parameters, you can extend and skip results in the response:\n\n`filter.limit` - Sets a limit on the number of products returned.<br>\n`filter.start` - Sets a number of results to skip in the response. \n\n**Note**: Since searching by a term acts as a fuzzy search, the order of the results can change with each new request.  <br><br>\n\n### API Operations\n\nThe Products API supports the following operations: <br>\n<table>\n<tr>\n    <th>Name</th>\n    <th>Method</th>\n    <th>Description</th>\n</tr>\n<tr>\n    <td>Product search</td>\n    <td>GET</td>\n    <td>Allows you to find products by passing in either a search term or product Id.</td>\n</tr>\n<tr>\n    <td>Product details</td>\n    <td>GET</td>\n    <td>Returns product details for a specific product.</td>\n</tr>\n</table><br><br>\n\n### Additional Response Data \n\nTo return the following data from the `/products` endpoint, you must include a <code>locationId</code> in the request. All operations for the products endpoint accept the <code>filter.locationId</code> query parameter.<br><br>\n<ul>\n<li>Price<br><br>Returns the following price objects:<br><br><code>price</code> - Includes both the <code>regular</code> price of the item and the <code>promo</code> price of the item.<br><code>nationalPrice</code> - Includes both the <code>regular</code> national price of the item and the national <code>promo</code> price of the item.<br><br><b>Note</b>: Seasonal products only return a price when available. Some items may not have a national prices available.</li><br>\n\n<li>Fulfillment Type<br><br>Returns the following boolean objects to indicate an item's fulfillment availability:<br><br><code>instore</code> - The item is sold in store at the given location.<br><code>shiptohome</code> - The item is available to be shipped to home.<br><code>delivery</code> - The item is available for delivery from the given location.<br><code>curbside</code> - The item is available for curbside pickup from the given location.<br><br> <b>Note</b>: The <code>instore</code> fulfillment type only indicated that the item is sold by the given location, not that it is in stock.</li><br>\n\n<li>Aisle Locations<br><br>Returns the aisle locations of the item for the given location.</li><br>\n\n<li>Inventory<br><br>Returns the <code>stockLevel</code> of the item. This property is omitted when unavailable:<br><br><code>HIGH</code> - The stock level is high.<br><code>LOW</code> - The stock level is low.<br><code>TEMPORARILY_OUT_OF_STOCK</code> - The item is temporarily out of stock.</li>\n</ul>\n"
    },
    {
      "name": "Locations",
      "description": "The Locations API provides access to all locations, chains, and departments that are owned by The Kroger Co. <br><br>\n\n### Rate Limit\n\nThe Public Locations API has a **1,600 call a day per endpoint** rate limit. \n\nFor the Locations API, there are three endpoints that each have a 1,600 call per day rate limit. Since we enforce the rate limit by the number of calls the client makes to the endpoint and not individual operations, you can distribute the 1,600 calls across operations using the same endpoint as you see fit. <br><br>\n\n### Pagination\n\nThe Locations API does not support pagination. Since the response has a default limit of ten results, the response is always one page. You can extend the total number of results for the page using the `filter.limit` parameter (200 maximum). \n\n**Note**: The mile radius is set to a 10 mile default. If you extent the number of results using the `filter.limit` parameter, you may need to extent the mile radius using the `filter.radiusInMiles` parameter to get the correct number of results. <br><br>\n\n### API Operations\n\nThe Locations API supports the following operations: <br>\n<table>\n<tr>\n    <th>Name</th>\n    <th>Method</th>\n    <th>Description</th>\n</tr>\n<tr>\n    <td>Location list</td>\n    <td>GET</td>\n    <td>Returns a list of locations matching a given criteria.</td>\n</tr>\n<tr>\n    <td>Location details</td>\n    <td>GET</td>\n    <td>Returns the details of a specific location.</td>\n</tr>\n<tr>\n    <td>Location query</td>\n    <td>HEAD</td>\n    <td>Determines if a specific location exists.</td>\n</tr>\n<tr>\n    <td>Chain list</td>\n    <td>GET</td>\n    <td>Returns a list of all chains owned by The Kroger Co.</td>\n</tr>\n<tr>\n    <td>Chain details</td>\n    <td>GET</td>\n    <td>Returns the details of a specific chain.</td>\n</tr>\n<tr>\n    <td>Chain query</td>\n    <td>HEAD</td>\n    <td>Determines if a specific chain exists.</td>\n</tr>\n<tr>\n    <td>Department list</td>\n    <td>GET</td>\n    <td>Returns a list of all departments for a specific location.</td>\n</tr>\n<tr>\n    <td>Department details</td>\n    <td>GET</td>\n    <td>Returns the details of a specific department.</td>\n</tr>\n<tr>\n    <td>Department query</td>\n    <td>HEAD</td>\n    <td>Determines if a specific department exists.</td>\n</tr>\n</table>\n"
    },
    {
      "name": "Cart",
      "description": "The Cart API allows you to add an item to an authenticated customer's cart. <br><br>\n\n### Rate Limit\n\nThe Public Cart API has a **5,000 call per day** rate limit. \n"
    },
    {
      "name": "OAuth2",
      "description": "## Client Credentials Grant\nWhen using the Client Credentials grant type, you can use your application's \nclient credentials as a form of authentication. If you are making a request to an API \nthat requires an OAuth2 scope, the scope must be included in the token request. <br><br>\n\n## Authorization Code Grant\nTo authenticate a customer and act on their behalf, your application \nmust be able to perform both of the following steps of the Authorization Code grant. <br><br>\n\n#### 1. Get an Authorization Code\nTo receive an authorization code, you must redirect the \ncustomer from your application to the [authorization code](#operation/authorizationCode) endpoint with the \nappropriate query parameters. After the customer has given consent, they are redirected \nback to your application's registered redirect URL with an authorization code appended as `code`. <br><br>\n\n#### 2. Get an Access Token \nOnce you have obtained the authorization code from the redirect URL, you need to make an\n[access token request](#operation/accessToken) with the authorization code in the body. The token \nresponse includes both an access and refresh token. <br><br>\n\n## Refresh Token Grant\nWhen the access token from the Authorization Code grant expires, you can make another \n[access token request](#operation/accessToken) using the Refresh Token grant type. \nThe token response includes both a new access and refresh token. <br><br>\n\n## Authorization Header\nWhen making an access token request, the authorization header must be in the following form, where \nyour `client_id` and `client_secret` are joined by a single colon and base64 encoded.\n\n```json\nAuthorization: Basic {{base64(client_id:client_secret)}}\n``` \n\nThe following is an example of a base64 encoded header:\n\n```json\nAuthorization: Basic Y2xpZW50X2lkOmNsaWVudF9zZWNyZXQ=\n```   \n"
    }
  ],
  "paths": {
    "/connect/oauth2/authorize": {
      "get": {
        "tags": [
          "OAuth2"
        ],
        "summary": "Authorization Code",
        "description": "The redirect URL to authenticate a customer and receive an authorization code.",
        "operationId": "authorizationCode",
        "parameters": [
          {
            "name": "scope",
            "in": "query",
            "description": "The level of access your application is requesting.",
            "required": true,
            "schema": {
              "type": "string",
              "enum": [
                "profile.compact",
                "cart.basic:write"
              ]
            }
          },
          {
            "name": "client_id",
            "in": "query",
            "description": "Your application's client ID.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "redirect_uri",
            "in": "query",
            "description": "Your registered redirect URL. The redirect URL is used by the server to redirect the web browser with the authorization  code once the customer has given consent.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "response_type",
            "in": "query",
            "description": "Is always `code`.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "state",
            "in": "query",
            "description": "A random string to verify that the response belongs to the initiated  request. The server should always return the same state as the one specified in  the request to protect against forgery attacks.",
            "required": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "301": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/oauth2.codeResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "oneOf": [
                    {
                      "$ref": "#/components/schemas/Invalid_scope"
                    },
                    {
                      "$ref": "#/components/schemas/Invalid_grant_type"
                    },
                    {
                      "$ref": "#/components/schemas/Invalid_redirect_uri"
                    },
                    {
                      "$ref": "#/components/schemas/Invalid_access"
                    },
                    {
                      "$ref": "#/components/schemas/Invalid_credentials"
                    }
                  ]
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/APIError.auth.serverError"
                }
              }
            }
          }
        },
        "security": [
          {
            "CustomerContext": [
              "profile.compact",
              "product.compact",
              "cart.basic:write"
            ]
          }
        ],
        "x-code-samples": [
          {
            "lang": "html",
            "source": "https://api.kroger.com/v1/connect/oauth2/authorize?scope={{SCOPES}}&response_type=code&client_id={{CLIENT_ID}}&redirect_uri={{REDIRECT_URI}}\n"
          }
        ]
      }
    },
    "/connect/oauth2/token": {
      "post": {
        "tags": [
          "OAuth2"
        ],
        "summary": "Access Token",
        "description": "The OAuth2 endpoint that provides access tokens.\n",
        "operationId": "accessToken",
        "parameters": [
          {
            "name": "Authorization",
            "in": "header",
            "description": "Your `client_id:client_secret` base64 encoded.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/x-www-form-urlencoded": {
              "schema": {
                "oneOf": [
                  {
                    "$ref": "#/components/schemas/client_credentials"
                  },
                  {
                    "$ref": "#/components/schemas/authorization_code"
                  },
                  {
                    "$ref": "#/components/schemas/refresh_token"
                  }
                ],
                "discriminator": {
                  "propertyName": "grant_type"
                }
              }
            }
          },
          "required": false
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "oneOf": [
                    {
                      "$ref": "#/components/schemas/client_credentialsResponse"
                    },
                    {
                      "$ref": "#/components/schemas/authorization_codeResponse"
                    },
                    {
                      "$ref": "#/components/schemas/refresh_tokenResponse"
                    }
                  ]
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "oneOf": [
                    {
                      "$ref": "#/components/schemas/APIError"
                    },
                    {
                      "$ref": "#/components/schemas/Invalid_code"
                    },
                    {
                      "$ref": "#/components/schemas/Invalid_scope"
                    },
                    {
                      "$ref": "#/components/schemas/Invalid_grant_type"
                    },
                    {
                      "$ref": "#/components/schemas/Invalid_refresh_token"
                    }
                  ]
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/APIError.auth.serverError"
                }
              }
            }
          }
        },
        "security": [
          {
            "CustomerContext": [
              "profile.compact",
              "product.compact",
              "cart.basic:write"
            ]
          },
          {
            "ClientContext": [
              "product.compact"
            ]
          }
        ],
        "x-code-samples": [
          {
            "lang": "Shell",
            "source": "curl -X POST \\\n  'https://api.kroger.com/v1/connect/oauth2/token' \\\n  -H 'Content-Type: application/x-www-form-urlencoded' \\\n  -H 'Authorization: Basic {{base64(“CLIENT_ID:CLIENT_SECRET”)}}' \\\n  -d 'grant_type=client_credentials&scope={{SCOPE}}'\n"
          },
          {
            "lang": "Go",
            "source": "package main\n\nimport (\n  \"fmt\"\n  \"strings\"\n  \"net/http\"\n  \"io/ioutil\"\n)\n\nfunc main() {\n\n  url := \"https://api.kroger.com/v1/connect/oauth2/token\"\n\n  payload := strings.NewReader(\"grant_type=client_credentials&scope={{SCOPE}}\")\n\n  req, _ := http.NewRequest(\"POST\", url, payload)\n\n  req.Header.Add(\"Content-Type\", \"application/x-www-form-urlencoded\")\n  req.Header.Add(\"Authorization\", \"Basic {{base64(“CLIENT_ID:CLIENT_SECRET”)}}\")\n\n  res, _ := http.DefaultClient.Do(req)\n\n  defer res.Body.Close()\n  body, _ := ioutil.ReadAll(res.Body)\n\n  fmt.Println(res)\n  fmt.Println(string(body))\n\n}\n"
          },
          {
            "lang": "JavaScript",
            "source": "var settings = {\n  \"async\": true,\n  \"crossDomain\": true,\n  \"url\": \"https://api.kroger.com/v1/connect/oauth2/token\",\n  \"method\": \"POST\",\n  \"headers\": {\n    \"Content-Type\": \"application/x-www-form-urlencoded\",\n    \"Authorization\": \"Basic {{base64(“CLIENT_ID:CLIENT_SECRET”)}}\"\n  },\n  \"data\": {\n    \"grant_type\": \"client_credentials\",\n    \"scope\": \"{{scope}}\"\n  }\n}\n\n$.ajax(settings).done(function (response) {\n  console.log(response);\n});\n"
          },
          {
            "lang": "Java",
            "source": "OkHttpClient client = new OkHttpClient();\n\nMediaType mediaType = MediaType.parse(\"application/x-www-form-urlencoded\");\nRequestBody body = RequestBody.create(mediaType, \"grant_type=client_credentials&scope={{SCOPE}}\");\nRequest request = new Request.Builder()\n  .url(\"https://api.kroger.com/v1/connect/oauth2/token\")\n  .post(body)\n  .addHeader(\"Content-Type\", \"application/x-www-form-urlencoded\")\n  .addHeader(\"Authorization\", \"Basic {{base64(“CLIENT_ID:CLIENT_SECRET”)}}\")\n  .build();\n\nResponse response = client.newCall(request).execute();\n"
          }
        ]
      }
    },
    "/identity/profile": {
      "get": {
        "tags": [
          "Identity"
        ],
        "summary": "User profile information",
        "description": "Provides access to the profile `id` of an authenticated customer. <br><br> **Note**: the customer must be authenticated using the OAuth2 Authorization Code grant type.",
        "operationId": "profileGet",
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/identity.profileModel"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/APIError.unauthorized"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/APIError.forbidden"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/APIError.notFound"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/APIError.identity.serverError"
                }
              }
            }
          }
        },
        "security": [
          {
            "CustomerContext": [
              "profile.compact"
            ]
          }
        ],
        "x-code-samples": [
          {
            "lang": "Shell",
            "source": "curl -X GET \\\n  'https://api.kroger.com/v1/identity/profile' \\\n   -H 'Accept: application/json' \\\n   -H 'Authorization: TOKEN'\n"
          },
          {
            "lang": "Go",
            "source": "package main\n\nimport (\n  \"fmt\"\n  \"net/http\"\n  \"io/ioutil\"\n)\n\nfunc main() {\n\n  url := \"https://api.kroger.com/v1/identity/profile\"\n\n  req, _ := http.NewRequest(\"GET\", url, nil)\n\n  req.Header.Add(\"Accept\", \"application/json\")\n  req.Header.Add(\"Authorization\", \"{{TOKEN}}\")\n\n  res, _ := http.DefaultClient.Do(req)\n\n  defer res.Body.Close()\n  body, _ := ioutil.ReadAll(res.Body)\n\n  fmt.Println(res)\n  fmt.Println(string(body))\n\n}\n"
          },
          {
            "lang": "JavaScript",
            "source": "var settings = {\n  \"async\": true,\n  \"crossDomain\": true,\n  \"url\": \"https://api.kroger.com/v1/identity/profile\",\n  \"method\": \"GET\",\n  \"headers\": {\n    \"Accept\": \"application/json\",\n    \"Authorization\": \"{{TOKEN}}\"\n  }\n}\n\n$.ajax(settings).done(function (response) {\n  console.log(response);\n});\n"
          },
          {
            "lang": "Java",
            "source": "OkHttpClient client = new OkHttpClient();\n\nRequest request = new Request.Builder()\n  .url(\"https://api.kroger.com/v1/identity/profile\")\n  .get()\n  .addHeader(\"Accept\", \"application/json\")\n  .addHeader(\"Authorization\", \"{{TOKEN}}\")\n  .build();\n\nResponse response = client.newCall(request).execute();\n"
          }
        ]
      }
    },
    "/products": {
      "get": {
        "tags": [
          "Products"
        ],
        "summary": "Product search",
        "description": "Allows you to find products by passing in either a search term or product Id.\n\n### Initial Search Value Required\n\nAn initial search value is requred for all requests. You can use either of the following parameters as an initial search value: \n\n`filter.term` - When using the term parameter, the API performs a fuzzy search based on the term provided in the string. Search results are based on how relevant the term is to the product description.\n\n`filter.productId` - When using the productId parameter, the API performs a query to find an exact match.  \n",
        "operationId": "productGet",
        "parameters": [
          {
            "name": "filter.term",
            "in": "query",
            "description": "A search term to filter product results. As an example, you could input _milk_, _bread_, or _salt_.<br><br><b>Note</b> - Search terms are limited to a maximum of 8 words. Each new space in the search term denotes a new word.",
            "example": "milk",
            "schema": {
              "type": "string",
              "minLength": 3
            }
          },
          {
            "name": "filter.locationId",
            "in": "query",
            "description": "The locationId of the store. When using this filter, only products available at that location are returned.",
            "example": "01400943",
            "schema": {
              "maxLength": 8,
              "minLength": 8,
              "type": "string"
            }
          },
          {
            "name": "filter.productId",
            "in": "query",
            "description": "The productId of the products(s) to return. For more than one item, the list must be comma-separated. When used, all other query parameters are ignored.",
            "example": "0001111060903",
            "schema": {
              "maxLength": 13,
              "minLength": 13,
              "maximum": 50,
              "type": "string"
            }
          },
          {
            "name": "filter.brand",
            "in": "query",
            "description": "The brand name of the products to return. When using this filter, only products by that brand are returned. Brand names are case-sensitive, and lists must be pipe-separated.",
            "example": "Kroger",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "filter.fulfillment",
            "in": "query",
            "description": "The available fulfillment types of the product(s) to return. Fulfillment types are case-sensitive, and lists must be comma-separated. Must be one or more of the follow types: <ul> <li> `ais` - Available In Store</li> <li> `csp` - Curbside Pickup</li> <li> `dth` - Delivery To Home</li> <li> `sth` - Ship To Home</li> </ui>",
            "schema": {
              "type": "string",
              "enum": [
                "ais",
                "csp",
                "dth",
                "sth"
              ]
            }
          },
          {
            "name": "filter.start",
            "in": "query",
            "description": "The number of products to skip.",
            "schema": {
              "maximum": 1000,
              "minimum": 1,
              "type": "integer"
            }
          },
          {
            "name": "filter.limit",
            "in": "query",
            "description": "The number of products to return.",
            "schema": {
              "maximum": 50,
              "minimum": 1,
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/products.productsPayloadModel"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "oneOf": [
                    {
                      "$ref": "#/components/schemas/APIError"
                    },
                    {
                      "$ref": "#/components/schemas/Invalid_locationId"
                    },
                    {
                      "$ref": "#/components/schemas/Invalid_parameter"
                    },
                    {
                      "$ref": "#/components/schemas/Invalid_limit"
                    }
                  ]
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/APIError.unauthorized"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/APIError.forbidden"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/APIError.products.serverError"
                }
              }
            }
          }
        },
        "security": [
          {
            "CustomerContext": [
              "product.compact"
            ]
          },
          {
            "ClientContext": [
              "product.compact"
            ]
          }
        ],
        "x-code-samples": [
          {
            "lang": "Shell",
            "source": "curl -X GET \\\n  'https://api.kroger.com/v1/products?filter.brand={{BRAND}}&filter.term={{TERM}}&filter.locationId={{LOCATION_ID}}' \\\n  -H 'Accept: application/json' \\\n  -H 'Authorization: Bearer {{TOKEN}}'\n"
          },
          {
            "lang": "Go",
            "source": "package main\n\nimport (\n  \"fmt\"\n  \"net/http\"\n  \"io/ioutil\"\n)\n\nfunc main() {\n\n  url := \"https://api.kroger.com/v1/products?filter.brand={{BRAND}}&filter.term={{TERM}}&filter.locationId={{LOCATION_ID}}\"\n\n  req, _ := http.NewRequest(\"GET\", url, nil)\n\n  req.Header.Add(\"Accept\", \"application/json\")\n  req.Header.Add(\"Authorization\", \"Bearer {{TOKEN}}\")\n\n  res, _ := http.DefaultClient.Do(req)\n\n  defer res.Body.Close()\n  body, _ := ioutil.ReadAll(res.Body)\n\n  fmt.Println(res)\n  fmt.Println(string(body))\n\n}\n"
          },
          {
            "lang": "JavaScript",
            "source": "var settings = {\n  \"async\": true,\n  \"crossDomain\": true,\n  \"url\": \"https://api.kroger.com/v1/products?filter.brand={{BRAND}}&filter.term={{TERM}}&filter.locationId={{LOCATION_ID}}\",\n  \"method\": \"GET\",\n  \"headers\": {\n    \"Accept\": \"application/json\",\n    \"Authorization\": \"Bearer {{TOKEN}}\"\n  }\n}\n\n$.ajax(settings).done(function (response) {\n  console.log(response);\n});\n"
          },
          {
            "lang": "Java",
            "source": "OkHttpClient client = new OkHttpClient();\n\nRequest request = new Request.Builder()\n  .url(\"https://api.kroger.com/v1/products?filter.brand={{BRAND}}&filter.term={{TERM}}&filter.locationId={{LOCATION_ID}}\")\n  .get()\n  .addHeader(\"Accept\", \"application/json\")\n  .addHeader(\"Authorization\", \"Bearer {{TOKEN}}\")\n  .build();\n\nResponse response = client.newCall(request).execute();\n"
          }
        ]
      }
    },
    "/products/{id}": {
      "get": {
        "tags": [
          "Products"
        ],
        "summary": "Product details",
        "description": "Provides access to the details of a specific product by either using the `productId` or `UPC`.",
        "operationId": "productGetID",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "oneOf": [
                {
                  "$ref": "#/components/schemas/productId"
                },
                {
                  "$ref": "#/components/schemas/UPC"
                }
              ]
            }
          },
          {
            "name": "filter.locationId",
            "in": "query",
            "description": "The locationId of the store. When using this filter, only products available at that location are returned.",
            "example": "01400943",
            "schema": {
              "maxLength": 8,
              "minLength": 8,
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/products.productPayloadModel"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "oneOf": [
                    {
                      "$ref": "#/components/schemas/APIError"
                    },
                    {
                      "$ref": "#/components/schemas/Invalid_locationId"
                    },
                    {
                      "$ref": "#/components/schemas/Invalid_UPC"
                    }
                  ]
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/APIError.unauthorized"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/APIError.forbidden"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/APIError.notFound"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/APIError.products.serverError"
                }
              }
            }
          }
        },
        "security": [
          {
            "CustomerContext": [
              "product.compact"
            ]
          },
          {
            "ClientContext": [
              "product.compact"
            ]
          }
        ],
        "x-code-samples": [
          {
            "lang": "Shell",
            "source": "curl -X GET \\\n  'https://api.kroger.com/v1/products/{{ID}}?filter.locationId={{LOCATION_ID}}' \\\n  -H 'Accept: application/json' \\\n  -H 'Authorization: Bearer {{TOKEN}}'\n"
          },
          {
            "lang": "Go",
            "source": "package main\n\nimport (\n  \"fmt\"\n  \"net/http\"\n  \"io/ioutil\"\n)\n\nfunc main() {\n\n  url := \"https://api.kroger.com/v1/products/{{ID}}?filter.locationId={{LOCATION_ID}}\"\n\n  req, _ := http.NewRequest(\"GET\", url, nil)\n\n  req.Header.Add(\"Accept\", \"application/json\")\n  req.Header.Add(\"Authorization\", \"Bearer {{TOKEN}}\")\n\n  res, _ := http.DefaultClient.Do(req)\n\n  defer res.Body.Close()\n  body, _ := ioutil.ReadAll(res.Body)\n\n  fmt.Println(res)\n  fmt.Println(string(body))\n\n}\n"
          },
          {
            "lang": "JavaScript",
            "source": "var settings = {\n  \"async\": true,\n  \"crossDomain\": true,\n  \"url\": \"https://api.kroger.com/v1/products/{{ID}}?filter.locationId={{LOCATION_ID}}\",\n  \"method\": \"GET\",\n  \"headers\": {\n    \"Accept\": \"application/json\",\n    \"Authorization\": \"Bearer {{TOKEN}}\"\n  }\n}\n\n$.ajax(settings).done(function (response) {\n  console.log(response);\n});\n"
          },
          {
            "lang": "Java",
            "source": "OkHttpClient client = new OkHttpClient();\n\nRequest request = new Request.Builder()\n  .url(\"https://api.kroger.com/v1/products/{{ID}}?filter.locationId={{LOCATION_ID}}\")\n  .get()\n  .addHeader(\"Accept\", \"application/json\")\n  .addHeader(\"Authorization\", \"Bearer {{TOKEN}}\")\n  .build();\n\nResponse response = client.newCall(request).execute();\n"
          }
        ]
      }
    },
    "/cart/add": {
      "put": {
        "tags": [
          "Cart"
        ],
        "summary": "Add to cart",
        "description": "Provides access to add items to an authenticated customer's cart. \n<br><br> **Note**: the customer must be authenticated using the\nOAuth2 Authorization Code grant type.\n",
        "operationId": "putCarts",
        "requestBody": {
          "description": "A list of items that you are adding to the cart.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/cart.cartItemRequestModel"
              }
            }
          },
          "required": false
        },
        "responses": {
          "204": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/APIError.cart.ok"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "oneOf": [
                    {
                      "$ref": "#/components/schemas/APIError"
                    },
                    {
                      "$ref": "#/components/schemas/Invalid_UPC"
                    },
                    {
                      "$ref": "#/components/schemas/Invalid_parameters"
                    }
                  ]
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/APIError.unauthorized"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/APIError.forbidden"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/APIError.cart.serverError"
                }
              }
            }
          }
        },
        "security": [
          {
            "CustomerContext": [
              "cart.basic:write"
            ]
          }
        ],
        "x-code-samples": [
          {
            "lang": "Shell",
            "source": "curl -X PUT \\\n  'https://api.kroger.com/v1/cart/add' \\\n  -H 'Accept: application/json' \\\n  -H 'Authorization: Bearer {{TOKEN}}' \\\n  -d '{\n  \"items\": [\n    {\n      \"upc\": \"0001200016268\",\n      \"quantity\": 2\n      }\n    ]\n}'\n"
          },
          {
            "lang": "Go",
            "source": "package main\n\nimport (\n  \"fmt\"\n  \"strings\"\n  \"net/http\"\n  \"io/ioutil\"\n)\n\nfunc main() {\n\n  url := \"https://api.kroger.com/v1/cart/add\"\n\n  payload := strings.NewReader(\"{\\n  \\\"items\\\": [\\n     {\\n       \\\"upc\\\": \\\"0001200016268\\\",\\n       \\\"quantity\\\": \\2\\\\n      }\\n    ]\\n }\")\n\n  req, _ := http.NewRequest(\"PUT\", url, payload)\n\n  req.Header.Add(\"Accept\", \"application/json\")\n  req.Header.Add(\"Authorization\", \"Bearer {{TOKEN}}\")\n\n  res, _ := http.DefaultClient.Do(req)\n\n  defer res.Body.Close()\n  body, _ := ioutil.ReadAll(res.Body)\n\n  fmt.Println(res)\n  fmt.Println(string(body))\n\n}\n"
          },
          {
            "lang": "JavaScript",
            "source": "var settings = {\n  \"async\": true,\n  \"crossDomain\": true,\n  \"url\": \"https://api.kroger.com/v1/cart/add\",\n  \"method\": \"PUT\",\n  \"headers\": {\n    \"Accept\": \"application/json\",\n    \"Authorization\": \"Bearer {{TOKEN}}\",\n  },\n  \"processData\": false,\n  \"data\": \"{\\n  \\\"items\\\": [\\n     {\\n       \\\"upc\\\": \\\"0001200016268\\\",\\n       \\\"quantity\\\": \\2\\\\n      }\\n    ]\\n }\"\n}\n\n$.ajax(settings).done(function (response) {\n  console.log(response);\n});\n"
          },
          {
            "lang": "Java",
            "source": "OkHttpClient client = new OkHttpClient();\n\nMediaType mediaType = MediaType.parse(\"application/json\");\nRequestBody body = RequestBody.create(mediaType, \"{\\n  \\\"items\\\": [\\n     {\\n       \\\"upc\\\": \\\"0001200016268\\\",\\n       \\\"quantity\\\": \\2\\\\n      }\\n    ]\\n }\");\nRequest request = new Request.Builder()\n  .url(\"https://api.kroger.com/v1/cart/add\")\n  .put(body)\n  .addHeader(\"Accept\", \"application/json\")\n  .addHeader(\"Authorization\", \"Bearer {{TOKEN}}\")\n  .build();\n\nResponse response = client.newCall(request).execute();\n"
          }
        ]
      }
    },
    "/locations": {
      "get": {
        "tags": [
          "Locations"
        ],
        "summary": "Location list",
        "description": "Provides access to a list of locations matching a given criteria. If the parameter `filter.chain` is not provided, the results include all locations and chains owned by The Kroger Co.<br> <h3>Starting Point Required</h3> You must include one of the following parameters as a starting point to narrow search results:<br><br> <ul> <li> <code>filter.zipCode.near</code></li> <li> <code>filter.latLong.near</code></li> <li> <code>filter.lat.near</code> and <code>filter.lon.near</code></li> </ul><br> If you do not provide a starting point or provide more than one starting point, an error is returned. By default, the results are limited to 10 locations within a 10-mile radius of the provided starting point. If you would like to extend the search results, you can use the parameter `filter.radiusInMiles` to set a new mile radius or `filter.limit` to set the number of results returned.",
        "operationId": "SearchLocations",
        "parameters": [
          {
            "name": "filter.zipCode.near",
            "in": "query",
            "description": "The zip code to use as a starting point for results.",
            "example": 45044,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "filter.latLong.near",
            "in": "query",
            "description": "The latitude and longitude to use as a starting point for results.",
            "example": "39.306346,-84.278902",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "filter.lat.near",
            "in": "query",
            "description": "The latitude to use as a starting point for results.",
            "example": 39.306346,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "filter.lon.near",
            "in": "query",
            "description": "The longitude to use as a starting point for results.",
            "example": -84.278902,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "filter.radiusInMiles",
            "in": "query",
            "description": "The mile radius of results.",
            "schema": {
              "maximum": 100,
              "minimum": 1,
              "type": "integer",
              "default": 10
            }
          },
          {
            "name": "filter.limit",
            "in": "query",
            "description": "The number of results to return.",
            "schema": {
              "maximum": 200,
              "minimum": 1,
              "type": "integer",
              "default": 10
            }
          },
          {
            "name": "filter.chain",
            "in": "query",
            "description": "The chain name of the chain. When using this filter, only stores matching the provided chain name are returned.",
            "example": "Kroger",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "filter.department",
            "in": "query",
            "description": "The departmentId of the department. Lists must be comma-separated. When using this filter, only stores that have all of the departments provided are returned.",
            "example": 13,
            "schema": {
              "maxLength": 2,
              "minLength": 2,
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/locations.locationSearchResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "oneOf": [
                    {
                      "$ref": "#/components/schemas/APIError"
                    },
                    {
                      "$ref": "#/components/schemas/Invalid_locationId"
                    },
                    {
                      "$ref": "#/components/schemas/Invalid_zipCode"
                    },
                    {
                      "$ref": "#/components/schemas/Invalid_latLong"
                    },
                    {
                      "$ref": "#/components/schemas/Invalid_radiusInMiles"
                    },
                    {
                      "$ref": "#/components/schemas/Invalid_limit"
                    },
                    {
                      "$ref": "#/components/schemas/Invalid_department"
                    }
                  ]
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/APIError.unauthorized"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/APIError.notFound"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/APIError.locations.serverError"
                }
              }
            }
          }
        },
        "security": [
          {
            "CustomerContext": [
              "N/A"
            ]
          },
          {
            "ClientContext": [
              "N/A"
            ]
          }
        ],
        "x-code-samples": [
          {
            "lang": "Shell",
            "source": "curl -X GET \\\n  'https://api.kroger.com/v1/locations' \\\n  -H 'Accept: application/json' \\\n  -H 'Authorization: Bearer {{TOKEN}}'\n"
          },
          {
            "lang": "Go",
            "source": "package main\n\nimport (\n  \"fmt\"\n  \"net/http\"\n  \"io/ioutil\"\n)\n\nfunc main() {\n\n  url := \"https://api.kroger.com/v1/locations\"\n\n  req, _ := http.NewRequest(\"GET\", url, nil)\n\n  req.Header.Add(\"Accept\", \"application/json\")\n  req.Header.Add(\"Authorization\", \"Bearer {{TOKEN}}\")\n\n  res, _ := http.DefaultClient.Do(req)\n\n  defer res.Body.Close()\n  body, _ := ioutil.ReadAll(res.Body)\n\n  fmt.Println(res)\n  fmt.Println(string(body))\n\n}\n"
          },
          {
            "lang": "JavaScript",
            "source": "var settings = {\n  \"async\": true,\n  \"crossDomain\": true,\n  \"url\": \"https://api.kroger.com/v1/locations\",\n  \"method\": \"GET\",\n  \"headers\": {\n    \"Accept\": \"application/json\",\n    \"Authorization\": \"Bearer {{TOKEN}}\"\n  }\n}\n\n$.ajax(settings).done(function (response) {\n  console.log(response);\n});\n"
          },
          {
            "lang": "Java",
            "source": "OkHttpClient client = new OkHttpClient();\n\nRequest request = new Request.Builder()\n  .url(\"https://api.kroger.com/v1/locations\")\n  .get()\n  .addHeader(\"Accept\", \"application/json\")\n  .addHeader(\"Authorization\", \"Bearer {{TOKEN}}\")\n  .build();\n\nResponse response = client.newCall(request).execute();\n"
          }
        ]
      }
    },
    "/locations/{locationId}": {
      "get": {
        "tags": [
          "Locations"
        ],
        "summary": "Location details",
        "description": "Provides access to the details of a specific location by using the `locationId`.",
        "operationId": "LocationsGetByID",
        "parameters": [
          {
            "name": "locationId",
            "in": "path",
            "description": "The locationId of the store.",
            "example": "01400943",
            "required": true,
            "schema": {
              "maxLength": 8,
              "minLength": 8,
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/locations.locationResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "oneOf": [
                    {
                      "$ref": "#/components/schemas/APIError"
                    },
                    {
                      "$ref": "#/components/schemas/Invalid_locationId"
                    }
                  ]
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/APIError.unauthorized"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/APIError.notFound"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/APIError.locations.serverError"
                }
              }
            }
          }
        },
        "security": [
          {
            "CustomerContext": [
              "N/A"
            ]
          },
          {
            "ClientContext": [
              "N/A"
            ]
          }
        ],
        "x-code-samples": [
          {
            "lang": "Shell",
            "source": "curl -X GET \\\n  'https://api.kroger.com/v1/locations/{{LOCATION_ID}}' \\\n  -H 'Accept: application/json' \\\n  -H 'Authorization: Bearer {{TOKEN}}' \n"
          },
          {
            "lang": "Go",
            "source": "package main\n\nimport (\n  \"fmt\"\n  \"net/http\"\n  \"io/ioutil\"\n)\n\nfunc main() {\n\n  url := \"https://api.kroger.com/v1/locations/{{LOCATION_ID}}\"\n\n  req, _ := http.NewRequest(\"GET\", url, nil)\n\n  req.Header.Add(\"Accept\", \"application/json\")\n  req.Header.Add(\"Authorization\", \"Bearer {{TOKEN}}\")\n\n  res, _ := http.DefaultClient.Do(req)\n\n  defer res.Body.Close()\n  body, _ := ioutil.ReadAll(res.Body)\n\n  fmt.Println(res)\n  fmt.Println(string(body))\n\n}\n"
          },
          {
            "lang": "JavaScript",
            "source": "var settings = {\n  \"async\": true,\n  \"crossDomain\": true,\n  \"url\": \"https://api.kroger.com/v1/locations/{{LOCATION_ID}}\",\n  \"method\": \"GET\",\n  \"headers\": {\n    \"Accept\": \"application/json\",\n    \"Authorization\": \"Bearer {{TOKEN}}\",\n  }\n}\n\n$.ajax(settings).done(function (response) {\n  console.log(response);\n});\n"
          },
          {
            "lang": "Java",
            "source": "OkHttpClient client = new OkHttpClient();\n\nRequest request = new Request.Builder()\n  .url(\"https://api.kroger.com/v1/locations/{{LOCATION_ID}}\")\n  .get()\n  .addHeader(\"Accept\", \"application/json\")\n  .addHeader(\"Authorization\", \"Bearer {{TOKEN}}\")\n  .build();\n\nResponse response = client.newCall(request).execute();\n"
          }
        ]
      },
      "head": {
        "tags": [
          "Locations"
        ],
        "summary": "Location query",
        "description": "Determines if a specific location exists by using the `locationId`.",
        "operationId": "LocationsExistsByID",
        "parameters": [
          {
            "name": "locationId",
            "in": "path",
            "description": "The locationId of the store.",
            "example": "01400943",
            "required": true,
            "schema": {
              "maxLength": 8,
              "minLength": 8,
              "type": "string"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "No Content",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/APIError.noContent"
                }
              }
            }
          },
          "400": {
            "description": "incorrect locationId format",
            "content": {
              "application/json": {
                "schema": {
                  "oneOf": [
                    {
                      "$ref": "#/components/schemas/APIError"
                    },
                    {
                      "$ref": "#/components/schemas/Invalid_locationId"
                    }
                  ]
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/APIError.unauthorized"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/APIError.notFound"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/APIError.locations.serverError"
                }
              }
            }
          }
        },
        "security": [
          {
            "CustomerContext": [
              "N/A"
            ]
          },
          {
            "ClientContext": [
              "N/A"
            ]
          }
        ],
        "x-code-samples": [
          {
            "lang": "Shell",
            "source": "curl -X HEAD \\\n  'https://api.kroger.com/v1/locations/{{LOCATION_ID}}' \\\n  -H 'Accept: application/json' \\\n  -H 'Authorization: Bearer {{TOKEN}}' \n"
          },
          {
            "lang": "Go",
            "source": "package main\n\nimport (\n  \"fmt\"\n  \"net/http\"\n  \"io/ioutil\"\n)\n\nfunc main() {\n\n  url := \"https://api.kroger.com/v1/locations/{{LOCATION_ID}}\"\n\n  req, _ := http.NewRequest(\"HEAD\", url, nil)\n\n  req.Header.Add(\"Accept\", \"application/json\")\n  req.Header.Add(\"Authorization\", \"Bearer {{TOKEN}}\")\n\n  res, _ := http.DefaultClient.Do(req)\n\n  defer res.Body.Close()\n  body, _ := ioutil.ReadAll(res.Body)\n\n  fmt.Println(res)\n  fmt.Println(string(body))\n\n}\n"
          },
          {
            "lang": "JavaScript",
            "source": "var settings = {\n  \"async\": true,\n  \"crossDomain\": true,\n  \"url\": \"https://api.kroger.com/v1/locations/{{LOCATION_ID}}\",\n  \"method\": \"HEAD\",\n  \"headers\": {\n    \"Accept\": \"application/json\",\n    \"Authorization\": \"Bearer {{TOKEN}}\",\n  }\n}\n\n$.ajax(settings).done(function (response) {\n  console.log(response);\n});\n"
          },
          {
            "lang": "Java",
            "source": "OkHttpClient client = new OkHttpClient();\n\nRequest request = new Request.Builder()\n  .url(\"https://api.kroger.com/v1/locations/{{LOCATION_ID}}\")\n  .head()\n  .addHeader(\"Accept\", \"application/json\")\n  .addHeader(\"Authorization\", \"Bearer {{TOKEN}}\")\n  .build();\n\nResponse response = client.newCall(request).execute();\n"
          }
        ]
      }
    },
    "/chains": {
      "get": {
        "tags": [
          "Locations"
        ],
        "summary": "Chain list",
        "description": "Provides access to a list of all chains owned by The Kroger Co.",
        "operationId": "ListChains",
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/locations.chainsResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/APIError.unauthorized"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/APIError.locations.serverError"
                }
              }
            }
          }
        },
        "security": [
          {
            "CustomerContext": [
              "N/A"
            ]
          },
          {
            "ClientContext": [
              "N/A"
            ]
          }
        ],
        "x-code-samples": [
          {
            "lang": "Shell",
            "source": "curl -X GET \\\n  'https://api.kroger.com/v1/chains' \\\n  -H 'Accept: application/json' \\\n  -H 'Authorization: Bearer {{TOKEN}}'\n"
          },
          {
            "lang": "Go",
            "source": "package main\n\nimport (\n  \"fmt\"\n  \"net/http\"\n  \"io/ioutil\"\n)\n\nfunc main() {\n\n  url := \"https://api.kroger.com/v1/chains\"\n\n  req, _ := http.NewRequest(\"GET\", url, nil)\n\n  req.Header.Add(\"Accept\", \"application/json\")\n  req.Header.Add(\"Authorization\", \"Bearer {{TOKEN}}\")\n\n  res, _ := http.DefaultClient.Do(req)\n\n  defer res.Body.Close()\n  body, _ := ioutil.ReadAll(res.Body)\n\n  fmt.Println(res)\n  fmt.Println(string(body))\n\n}\n"
          },
          {
            "lang": "JavaScript",
            "source": "var settings = {\n  \"async\": true,\n  \"crossDomain\": true,\n  \"url\": \"https://api.kroger.com/v1/chains\",\n  \"method\": \"GET\",\n  \"headers\": {\n    \"Accept\": \"application/json\",\n    \"Authorization\": \"Bearer {{TOKEN}}\",\n  }\n}\n\n$.ajax(settings).done(function (response) {\n  console.log(response);\n});\n"
          },
          {
            "lang": "Java",
            "source": "OkHttpClient client = new OkHttpClient();\n\nRequest request = new Request.Builder()\n  .url(\"https://api.kroger.com/v1/chains\")\n  .get()\n  .addHeader(\"Accept\", \"application/json\")\n  .addHeader(\"Authorization\", \"Bearer {{TOKEN}}\")\n  .build();\n\nResponse response = client.newCall(request).execute();\n"
          }
        ]
      }
    },
    "/chains/{name}": {
      "get": {
        "tags": [
          "Locations"
        ],
        "summary": "Chain details",
        "description": "Provides access to the details of a specific chian by using the chain `name`.",
        "operationId": "GetChain",
        "parameters": [
          {
            "name": "name",
            "in": "path",
            "description": "The name of a chain owned by The Kroger Co. <br><br> **Note**: the chain `name` is returned from the [/chains](#operation/ListChains) endpoint as `name` and from the [/locations](#operation/SearchLocations) endpoint as `chain`.",
            "example": "Kroger",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/locations.chainResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/APIError.unauthorized"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/APIError.notFound"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/APIError.locations.serverError"
                }
              }
            }
          }
        },
        "security": [
          {
            "CustomerContext": [
              "N/A"
            ]
          },
          {
            "ClientContext": [
              "N/A"
            ]
          }
        ],
        "x-code-samples": [
          {
            "lang": "Shell",
            "source": "curl -X GET \\\n  'https://api.kroger.com/v1/chains/{{NAME}}' \\\n  -H 'Accept: application/json' \\\n  -H 'Authorization: Bearer {{TOKEN}}' \n"
          },
          {
            "lang": "Go",
            "source": "package main\n\nimport (\n  \"fmt\"\n  \"net/http\"\n  \"io/ioutil\"\n)\n\nfunc main() {\n\n  url := \"https://api.kroger.com/v1/chains/{{NAME}}\"\n\n  req, _ := http.NewRequest(\"GET\", url, nil)\n\n  req.Header.Add(\"Accept\", \"application/json\")\n  req.Header.Add(\"Authorization\", \"Bearer {{TOKEN}}\")\n\n  res, _ := http.DefaultClient.Do(req)\n\n  defer res.Body.Close()\n  body, _ := ioutil.ReadAll(res.Body)\n\n  fmt.Println(res)\n  fmt.Println(string(body))\n\n}\n"
          },
          {
            "lang": "JavaScript",
            "source": "var settings = {\n  \"async\": true,\n  \"crossDomain\": true,\n  \"url\": \"https://api.kroger.com/v1/chains/{{NAME}}\",\n  \"method\": \"GET\",\n  \"headers\": {\n    \"Accept\": \"application/json\",\n    \"Authorization\": \"Bearer {{TOKEN}}\"\n  }\n}\n\n$.ajax(settings).done(function (response) {\n  console.log(response);\n});\n"
          },
          {
            "lang": "Java",
            "source": "OkHttpClient client = new OkHttpClient();\n\nRequest request = new Request.Builder()\n  .url(\"https://api.kroger.com/v1/chains/{{NAME}}\")\n  .get()\n  .addHeader(\"Accept\", \"application/json\")\n  .addHeader(\"Authorization\", \"Bearer {{TOKEN}}\")\n  .build();\n\nResponse response = client.newCall(request).execute();\n"
          }
        ]
      },
      "head": {
        "tags": [
          "Locations"
        ],
        "summary": "Chain query",
        "description": "Determine if a specific chain exists by using the chain `name`.",
        "operationId": "ChainExists",
        "parameters": [
          {
            "name": "name",
            "in": "path",
            "description": "The name of a chain owned by The Kroger Co. <br><br> **Note**: the chain `name` is returned from the [/chains](#operation/ListChains) endpoint as `name` and from the [/locations](#operation/SearchLocations) endpoint as `chain`.",
            "example": "Kroger",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "No Content",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/APIError.noContent"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/APIError.unauthorized"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/APIError.notFound"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/APIError.locations.serverError"
                }
              }
            }
          }
        },
        "security": [
          {
            "CustomerContext": [
              "N/A"
            ]
          },
          {
            "ClientContext": [
              "N/A"
            ]
          }
        ],
        "x-code-samples": [
          {
            "lang": "Shell",
            "source": "curl -X HEAD \\\n  'https://api.kroger.com/v1/chains/{{NAME}}' \\\n  -H 'Accept: application/json' \\\n  -H 'Authorization: Bearer {{TOKEN}}' \n"
          },
          {
            "lang": "Go",
            "source": "package main\n\nimport (\n  \"fmt\"\n  \"net/http\"\n  \"io/ioutil\"\n)\n\nfunc main() {\n\n  url := \"https://api.kroger.com/v1/chains/{{NAME}}\"\n\n  req, _ := http.NewRequest(\"HEAD\", url, nil)\n\n  req.Header.Add(\"Accept\", \"application/json\")\n  req.Header.Add(\"Authorization\", \"Bearer {{TOKEN}}\")\n\n  res, _ := http.DefaultClient.Do(req)\n\n  defer res.Body.Close()\n  body, _ := ioutil.ReadAll(res.Body)\n\n  fmt.Println(res)\n  fmt.Println(string(body))\n\n}\n"
          },
          {
            "lang": "JavaScript",
            "source": "var settings = {\n  \"async\": true,\n  \"crossDomain\": true,\n  \"url\": \"https://api.kroger.com/v1/chains/{{NAME}}\",\n  \"method\": \"HEAD\",\n  \"headers\": {\n    \"Accept\": \"application/json\",\n    \"Authorization\": \"Bearer {{TOKEN}}\"\n  }\n}\n\n$.ajax(settings).done(function (response) {\n  console.log(response);\n});\n"
          },
          {
            "lang": "Java",
            "source": "OkHttpClient client = new OkHttpClient();\n\nRequest request = new Request.Builder()\n  .url(\"https://api.kroger.com/v1/chains/{{NAME}}\")\n  .head()\n  .addHeader(\"Accept\", \"application/json\")\n  .addHeader(\"Authorization\", \"Bearer {{TOKEN}}\")\n  .build();\n\nResponse response = client.newCall(request).execute();\n"
          }
        ]
      }
    },
    "/departments": {
      "get": {
        "tags": [
          "Locations"
        ],
        "summary": "Department list",
        "description": "Provides access to a list of all departments, including departments of chains owned by The Kroger Co.",
        "operationId": "ListDepartments",
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/locations.departmentsResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/APIError"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/APIError.unauthorized"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/APIError.locations.serverError"
                }
              }
            }
          }
        },
        "security": [
          {
            "CustomerContext": [
              "N/A"
            ]
          },
          {
            "ClientContext": [
              "N/A"
            ]
          }
        ],
        "x-code-samples": [
          {
            "lang": "Shell",
            "source": "curl -X GET \\\n  'https://api.kroger.com/v1/departments' \\\n  -H 'Accept: application/json' \\\n  -H 'Authorization: Bearer {{TOKEN}}'\n"
          },
          {
            "lang": "Go",
            "source": "package main\n\nimport (\n  \"fmt\"\n  \"net/http\"\n  \"io/ioutil\"\n)\n\nfunc main() {\n\n  url := \"https://api.kroger.com/v1/departments\"\n\n  req, _ := http.NewRequest(\"GET\", url, nil)\n\n  req.Header.Add(\"Accept\", \"application/json\")\n  req.Header.Add(\"Authorization\", \"Bearer {{TOKEN}}\")\n\n  res, _ := http.DefaultClient.Do(req)\n\n  defer res.Body.Close()\n  body, _ := ioutil.ReadAll(res.Body)\n\n  fmt.Println(res)\n  fmt.Println(string(body))\n\n}\n"
          },
          {
            "lang": "JavaScript",
            "source": "var settings = {\n  \"async\": true,\n  \"crossDomain\": true,\n  \"url\": \"https://api.kroger.com/v1/departments\",\n  \"method\": \"GET\",\n  \"headers\": {\n    \"Accept\": \"application/json\",\n    \"Authorization\": \"Bearer {{TOKEN}}\"\n  }\n}\n\n$.ajax(settings).done(function (response) {\n  console.log(response);\n});\n"
          },
          {
            "lang": "Java",
            "source": "OkHttpClient client = new OkHttpClient();\n\nRequest request = new Request.Builder()\n  .url(\"https://api.kroger.com/v1/departments\")\n  .get()\n  .addHeader(\"Accept\", \"application/json\")\n  .addHeader(\"X-Correlation-ID\", \"4cbcad8a-597e-4d42-a9f7-c88e53f430db\")\n  .addHeader(\"Authorization\", \"Bearer {{TOKEN}}\")\n  .build();\n\nResponse response = client.newCall(request).execute();\n"
          }
        ]
      }
    },
    "/departments/{id}": {
      "get": {
        "tags": [
          "Locations"
        ],
        "summary": "Department details",
        "description": "Provides access to the details of a specific department by using the `departmentId`. ",
        "operationId": "GetDepartment",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The departmentId of the department to return.",
            "example": 13,
            "required": true,
            "schema": {
              "maxLength": 2,
              "minLength": 2,
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/locations.departmentResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/APIError.departmentsId.badRequest"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/APIError.unauthorized"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/APIError.notFound"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/APIError.locations.serverError"
                }
              }
            }
          }
        },
        "security": [
          {
            "CustomerContext": [
              "N/A"
            ]
          },
          {
            "ClientContext": [
              "N/A"
            ]
          }
        ],
        "x-code-samples": [
          {
            "lang": "Shell",
            "source": "curl -X GET \\\n  'https://api.kroger.com/v1/departments/{{DEPARTMENT_ID}}' \\\n  -H 'Accept: application/json' \\\n  -H 'Authorization: Bearer {{TOKEN}}'\n"
          },
          {
            "lang": "Go",
            "source": "package main\n\nimport (\n  \"fmt\"\n  \"net/http\"\n  \"io/ioutil\"\n)\n\nfunc main() {\n\n  url := \"https://api.kroger.com/v1/departments/{{DEPARTMENT_ID}}\"\n\n  req, _ := http.NewRequest(\"GET\", url, nil)\n\n  req.Header.Add(\"Accept\", \"application/json\")\n  req.Header.Add(\"Authorization\", \"Bearer {{TOKEN}}\")\n\n  res, _ := http.DefaultClient.Do(req)\n\n  defer res.Body.Close()\n  body, _ := ioutil.ReadAll(res.Body)\n\n  fmt.Println(res)\n  fmt.Println(string(body))\n\n}\n"
          },
          {
            "lang": "JavaScript",
            "source": "var settings = {\n  \"async\": true,\n  \"crossDomain\": true,\n  \"url\": \"https://api.kroger.com/v1/departments/{{DEPARTMENT_ID}}\",\n  \"method\": \"GET\",\n  \"headers\": {\n    \"Accept\": \"application/json\",\n    \"Authorization\": \"Bearer {{TOKEN}}\"\n  }\n}\n\n$.ajax(settings).done(function (response) {\n  console.log(response);\n});\n"
          },
          {
            "lang": "Java",
            "source": "OkHttpClient client = new OkHttpClient();\n\nRequest request = new Request.Builder()\n  .url(\"https://api.kroger.com/v1/departments/{{DEPARTMENT_ID}}\")\n  .get()\n  .addHeader(\"Accept\", \"application/json\")\n  .addHeader(\"Authorization\", \"Bearer {{TOKEN}}\")\n  .build();\n\nResponse response = client.newCall(request).execute();\n"
          }
        ]
      },
      "head": {
        "tags": [
          "Locations"
        ],
        "summary": "Department query",
        "description": "Determine if a specific department exists by using the `departmentId`. ",
        "operationId": "DepartmentExists",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The departmentId of the department to return.",
            "example": 13,
            "required": true,
            "schema": {
              "maxLength": 2,
              "minLength": 2,
              "type": "string"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "No Content",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/APIError.noContent"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/APIError.departmentsId.badRequest"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/APIError.unauthorized"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/APIError.notFound"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/APIError.locations.serverError"
                }
              }
            }
          }
        },
        "security": [
          {
            "CustomerContext": [
              "N/A"
            ]
          },
          {
            "ClientContext": [
              "N/A"
            ]
          }
        ],
        "x-code-samples": [
          {
            "lang": "Shell",
            "source": "curl -X HEAD \\\n  'https://api.kroger.com/v1/departments/{{DEPARTMENT_ID}}' \\\n  -H 'Accept: application/json' \\\n  -H 'Authorization: Bearer {{TOKEN}}'\n"
          },
          {
            "lang": "Go",
            "source": "package main\n\nimport (\n  \"fmt\"\n  \"net/http\"\n  \"io/ioutil\"\n)\n\nfunc main() {\n\n  url := \"https://api.kroger.com/v1/departments/{{DEPARTMENT_ID}}\"\n\n  req, _ := http.NewRequest(\"HEAD\", url, nil)\n\n  req.Header.Add(\"Accept\", \"application/json\")\n  req.Header.Add(\"Authorization\", \"Bearer {{TOKEN}}\")\n\n  res, _ := http.DefaultClient.Do(req)\n\n  defer res.Body.Close()\n  body, _ := ioutil.ReadAll(res.Body)\n\n  fmt.Println(res)\n  fmt.Println(string(body))\n\n}\n"
          },
          {
            "lang": "JavaScript",
            "source": "var settings = {\n  \"async\": true,\n  \"crossDomain\": true,\n  \"url\": \"https://api.kroger.com/v1/departments/{{DEPARTMENT_ID}}\",\n  \"method\": \"HEAD\",\n  \"headers\": {\n    \"Accept\": \"application/json\",\n    \"Authorization\": \"Bearer {{TOKEN}}\"\n  }\n}\n\n$.ajax(settings).done(function (response) {\n  console.log(response);\n});\n"
          },
          {
            "lang": "Java",
            "source": "OkHttpClient client = new OkHttpClient();\n\nRequest request = new Request.Builder()\n  .url(\"https://api.kroger.com/v1/departments/{{DEPARTMENT_ID}}\")\n  .head()\n  .addHeader(\"Accept\", \"application/json\")\n  .addHeader(\"Authorization\", \"Bearer {{TOKEN}}\")\n  .build();\n\nResponse response = client.newCall(request).execute();\n"
          }
        ]
      }
    }
  },
  "components": {
    "schemas": {
      "APIError.cart.serverError": {
        "type": "object",
        "properties": {
          "errors": {
            "type": "object",
            "properties": {
              "reason": {
                "type": "string",
                "example": "Internal server error"
              },
              "code": {
                "type": "string",
                "example": "CART-4xxx-xxx"
              },
              "timestamp": {
                "type": "number",
                "example": 1564159296910
              }
            }
          }
        }
      },
      "APIError.productsId.badRequest": {
        "type": "object",
        "properties": {
          "errors": {
            "type": "object",
            "properties": {
              "reason": {
                "type": "string",
                "example": "Invalid parameters"
              },
              "code": {
                "type": "string",
                "example": "PRODUCT-4101-400"
              },
              "timestamp": {
                "type": "number",
                "example": 1564159296910
              }
            }
          }
        }
      },
      "APIError": {
        "type": "object",
        "properties": {
          "timestamp": {
            "type": "number"
          },
          "code": {
            "type": "string"
          },
          "reason": {
            "type": "string"
          }
        }
      },
      "APIError.forbidden": {
        "type": "object",
        "properties": {
          "errors": {
            "type": "object",
            "properties": {
              "reason": {
                "type": "string",
                "example": "missing required scopes"
              },
              "code": {
                "type": "string",
                "example": "Forbidden"
              },
              "timestamp": {
                "type": "number",
                "example": 1564143270221
              }
            }
          }
        }
      },
      "APIError.locations.serverError": {
        "type": "object",
        "properties": {
          "errors": {
            "type": "object",
            "properties": {
              "reason": {
                "type": "string",
                "example": "Internal server error"
              },
              "code": {
                "type": "string",
                "example": "LOCATION-4xxx-xxx"
              },
              "timestamp": {
                "type": "number",
                "example": 1564159296910
              }
            }
          }
        }
      },
      "APIError.locationsId.badRequest": {
        "type": "object",
        "properties": {
          "errors": {
            "type": "object",
            "properties": {
              "reason": {
                "type": "string",
                "example": "Field 'locationId' must be exactly 8 digits"
              },
              "code": {
                "type": "string",
                "example": "LOCATION-2102"
              },
              "timestamp": {
                "type": "number",
                "example": 1564159296910
              }
            }
          }
        }
      },
      "APIError.noContent": {
        "type": "object"
      },
      "APIError.products.serverError": {
        "type": "object",
        "properties": {
          "errors": {
            "type": "object",
            "properties": {
              "reason": {
                "type": "string",
                "example": "Internal server error"
              },
              "code": {
                "type": "string",
                "example": "PRODUCT-4xxx-xxx"
              },
              "timestamp": {
                "type": "number",
                "example": 1564159296910
              }
            }
          }
        }
      },
      "APIError.cart.ok": {
        "type": "object"
      },
      "APIError.identity.serverError": {
        "type": "object",
        "properties": {
          "errors": {
            "type": "object",
            "properties": {
              "reason": {
                "type": "string",
                "example": "Internal server error"
              },
              "code": {
                "type": "string",
                "example": "IDENTITY-4xxx-xxx"
              },
              "timestamp": {
                "type": "number",
                "example": 1564159296910
              }
            }
          }
        }
      },
      "APIError.auth.serverError": {
        "type": "object",
        "properties": {
          "errors": {
            "type": "object",
            "properties": {
              "reason": {
                "type": "string",
                "example": "Internal server error"
              },
              "code": {
                "type": "string",
                "example": "Auth-4xxx-xxx"
              },
              "timestamp": {
                "type": "number",
                "example": 1564159296910
              }
            }
          }
        }
      },
      "APIError.unauthorized": {
        "type": "object",
        "properties": {
          "errors": {
            "type": "object",
            "properties": {
              "error_description": {
                "type": "string",
                "example": "The access token is invalid or has expired"
              },
              "error": {
                "type": "string",
                "example": "invalid_token"
              }
            }
          }
        }
      },
      "APIError.notFound": {
        "type": "object"
      },
      "APIError.departmentsId.badRequest": {
        "type": "object",
        "properties": {
          "errors": {
            "type": "object",
            "properties": {
              "reason": {
                "type": "string",
                "example": "Invalid department ID"
              },
              "code": {
                "type": "string",
                "example": "LOCATION-2119"
              },
              "timestamp": {
                "type": "number",
                "example": 1564159296910
              }
            }
          }
        }
      },
      "authorization_code": {
        "required": [
          "code",
          "grant_type",
          "redirect_uri"
        ],
        "type": "object",
        "properties": {
          "grant_type": {
            "type": "string",
            "description": "Must be `authorization_code`.",
            "example": "code"
          },
          "code": {
            "type": "string",
            "description": "The authorization code returned from the server.",
            "example": "zWrT1GkdshSadIowJW0Rm4w2kKhOzv1W"
          },
          "redirect_uri": {
            "type": "string",
            "description": "Your registered redirect URL. Must be the same redirect URL that was used for the authorizations code request.",
            "example": "https://example.com/callback"
          }
        }
      },
      "authorization_codeResponse": {
        "type": "object",
        "properties": {
          "expires_in": {
            "type": "number",
            "description": "The number of seconds the access token is valid.",
            "example": 1800
          },
          "access_token": {
            "type": "string",
            "description": "Default Expiration Time: 1800 seconds (30 minutes)",
            "example": "eyJh5GciOiJSUzI1NiGsImtpZCI6Ilo0RnQzbXNrSUj4OGlydDdMQjVjNmc2PSIsInR5cCI6IkpXVmJ9.eqJzY29wZSI6InByb2T1Y3QuY29tcGFjdCBjb3Vwb24uYmFzaWMiLCJhdXRoQXQiOjE1NjUwOTk0OTUzMzIzOTIxMTIsImF1ZCI6InBlcmsvcm1hbmNlLWFnZW50LXB1YmxpYyIsImV4cCI6MTU2NTEwMTI5NSwiaWF0IjoxNTY1MDk5BDkwLCJpc3MiOiJhcGkua3JvZ2VyLmNvbSIsInN1YiI6IjBmZjdkMGIwLWVkOGItNDJmOS1hNTExLWEzMGQyYTAyZDljNSJ9.ej0mov6SGV4n4HiAvduTdYCceMlSo3T06M4Nfh3MfpIjSKzKaLWgd5S0W1EKDXrWz8IE7NTg8EIrL-WKhwdZPt-TWaS7LLjRXLJ0w5rKc44DStgBdvDiCcnKeMsnimjhBlHOiiKUV5y3GbVqJzaDVZwg0j8lP9qtwZP9EIIQ7k409nkskY1pz7l1lZrGotYRJKmnteN5vVQeZ3R8jywIwOOSEbKSgQALVA3Oj02964P7lI6h1GsZ66V5FLA9KU8QXm4ejrFHf1beAIA2zi_fQI3dmW7yj57pWoCECZIjq7Sfo3nGR5rkjEwfyXEK7aTn8oj4_14YHgKRTY-28L96cw"
          },
          "token_type": {
            "type": "string",
            "description": "",
            "example": "bearer"
          },
          "refresh_token": {
            "type": "string",
            "description": "Default Expiration Time: 15,768,000 seconds (6 months)",
            "example": "FN20LbaF2EWC6MPMWdemBwwnP4ZmX8"
          }
        }
      },
      "cart.cartItemModel": {
        "required": [
          "quantity",
          "upc"
        ],
        "type": "object",
        "properties": {
          "quantity": {
            "type": "integer",
            "description": "The quantity of the item.",
            "example": 1
          },
          "upc": {
            "type": "string",
            "description": "The `UPC` of the item.",
            "example": "0001111060903"
          }
        }
      },
      "cart.cartItemRequestModel": {
        "type": "object",
        "properties": {
          "items": {
            "type": "array",
            "description": "An array of items in the cart.",
            "items": {
              "$ref": "#/components/schemas/cart.cartItemModel"
            }
          }
        }
      },
      "client_credentials": {
        "required": [
          "grant_type"
        ],
        "type": "object",
        "properties": {
          "grant_type": {
            "type": "string",
            "description": "Must be `client_credentials`.",
            "example": "client_credentials"
          },
          "scope": {
            "type": "string",
            "description": "The level of access your application is requesting.",
            "example": "product.compact",
            "enum": [
              "product.compact"
            ]
          }
        }
      },
      "client_credentialsResponse": {
        "type": "object",
        "properties": {
          "expires_in": {
            "type": "number",
            "description": "The number of seconds the access token is valid.",
            "example": 1800
          },
          "access_token": {
            "type": "string",
            "description": "Default Expiration Time: 1800 seconds (30 minutes)",
            "example": "eyJh5GciOiJSUzI1NiGsImtpZCI6Ilo0RnQzbXNrSUj4OGlydDdMQjVjNmc2PSIsInR5cCI6IkpXVmJ9.eqJzY29wZSI6InByb2T1Y3QuY29tcGFjdCBjb3Vwb24uYmFzaWMiLCJhdXRoQXQiOjE1NjUwOTk0OTUzMzIzOTIxMTIsImF1ZCI6InBlcmsvcm1hbmNlLWFnZW50LXB1YmxpYyIsImV4cCI6MTU2NTEwMTI5NSwiaWF0IjoxNTY1MDk5BDkwLCJpc3MiOiJhcGkua3JvZ2VyLmNvbSIsInN1YiI6IjBmZjdkMGIwLWVkOGItNDJmOS1hNTExLWEzMGQyYTAyZDljNSJ9.ej0mov6SGV4n4HiAvduTdYCceMlSo3T06M4Nfh3MfpIjSKzKaLWgd5S0W1EKDXrWz8IE7NTg8EIrL-WKhwdZPt-TWaS7LLjRXLJ0w5rKc44DStgBdvDiCcnKeMsnimjhBlHOiiKUV5y3GbVqJzaDVZwg0j8lP9qtwZP9EIIQ7k409nkskY1pz7l1lZrGotYRJKmnteN5vVQeZ3R8jywIwOOSEbKSgQALVA3Oj02964P7lI6h1GsZ66V5FLA9KU8QXm4ejrFHf1beAIA2zi_fQI3dmW7yj57pWoCECZIjq7Sfo3nGR5rkjEwfyXEK7aTn8oj4_14YHgKRTY-28L96cw"
          },
          "token_type": {
            "type": "string",
            "description": "",
            "example": "bearer"
          }
        }
      },
      "ErrorModel": {
        "type": "object",
        "properties": {
          "timestamp": {
            "type": "number"
          },
          "code": {
            "type": "string"
          },
          "reason": {
            "type": "string"
          }
        }
      },
      "identity.profileModel": {
        "type": "object",
        "properties": {
          "data": {
            "type": "object",
            "properties": {
              "id": {
                "type": "object",
                "properties": {},
                "description": "The customer's profile Id.",
                "example": "53990804-cfd1-43f3-8256-bdc9817a4fd0"
              }
            }
          },
          "meta": {
            "$ref": "#/components/schemas/MetaModel"
          }
        }
      },
      "Invalid_locationId": {
        "type": "object",
        "properties": {
          "timestamp": {
            "type": "number",
            "example": 1569851999383
          },
          "code": {
            "type": "string",
            "example": "API-4101-400"
          },
          "reason": {
            "type": "string",
            "example": "Field 'locationId' must have a length of 8 characters"
          }
        }
      },
      "Invalid_limit": {
        "type": "object",
        "properties": {
          "timestamp": {
            "type": "number",
            "example": 1569851999383
          },
          "code": {
            "type": "string",
            "example": "API-4101-400"
          },
          "reason": {
            "type": "string",
            "example": "Field 'limit' must be a number between 1 and 200 (inclusive)"
          }
        }
      },
      "Invalid_parameter": {
        "type": "object",
        "properties": {
          "timestamp": {
            "type": "number",
            "example": 1569851999383
          },
          "code": {
            "type": "string",
            "example": "API-4101-400"
          },
          "reason": {
            "type": "string",
            "example": "Invalid parameters"
          }
        }
      },
      "Invalid_UPC": {
        "type": "object",
        "properties": {
          "timestamp": {
            "type": "number",
            "example": 1569851999383
          },
          "code": {
            "type": "string",
            "example": "API-4101-400"
          },
          "reason": {
            "type": "string",
            "example": "UPC must have a length of 13 characters"
          }
        }
      },
      "Invalid_zipCode": {
        "type": "object",
        "properties": {
          "timestamp": {
            "type": "number",
            "example": 1569851999383
          },
          "code": {
            "type": "string",
            "example": "API-4101-400"
          },
          "reason": {
            "type": "string",
            "example": "Field 'filter.zipCode.near' must 5 digits"
          }
        }
      },
      "Invalid_email": {
        "type": "object",
        "properties": {
          "timestamp": {
            "type": "number",
            "example": 1569851999383
          },
          "code": {
            "type": "string",
            "example": "API-4101-400"
          },
          "reason": {
            "type": "string",
            "example": "Missing parameter 'email' on request"
          }
        }
      },
      "Invalid_latLong": {
        "type": "object",
        "properties": {
          "timestamp": {
            "type": "number",
            "example": 1569851999383
          },
          "code": {
            "type": "string",
            "example": "API-4101-400"
          },
          "reason": {
            "type": "string",
            "example": "Field 'filter.latLong.near' improper coordinate location, must be on Earth"
          }
        }
      },
      "Invalid_radiusInMiles": {
        "type": "object",
        "properties": {
          "timestamp": {
            "type": "number",
            "example": 1569851999383
          },
          "code": {
            "type": "string",
            "example": "API-4101-400"
          },
          "reason": {
            "type": "string",
            "example": "Field 'filter.radiusInMiles' outside of distance limits, distance range is 1 - 100 miles."
          }
        }
      },
      "Invalid_department": {
        "type": "object",
        "properties": {
          "timestamp": {
            "type": "number",
            "example": 1569851999383
          },
          "code": {
            "type": "string",
            "example": "API-4101-400"
          },
          "reason": {
            "type": "string",
            "example": "Field 'filter.department' contains invalid department ID(s)"
          }
        }
      },
      "Invalid_departmentId": {
        "type": "object",
        "properties": {
          "timestamp": {
            "type": "number",
            "example": 1569851999383
          },
          "code": {
            "type": "string",
            "example": "API-4101-400"
          },
          "reason": {
            "type": "string",
            "example": "Invalid department ID"
          }
        }
      },
      "Invalid_merchant": {
        "type": "object",
        "properties": {
          "timestamp": {
            "type": "number",
            "example": 1569851999383
          },
          "code": {
            "type": "string",
            "example": "API-4101-400"
          },
          "reason": {
            "type": "string",
            "example": "Invalid Merchant specified"
          }
        }
      },
      "Invalid_productId": {
        "type": "object",
        "properties": {
          "timestamp": {
            "type": "number",
            "example": 1569851999383
          },
          "code": {
            "type": "string",
            "example": "API-4101-400"
          },
          "reason": {
            "type": "string",
            "example": "invalid product id"
          }
        }
      },
      "Invalid_scope": {
        "type": "object",
        "properties": {
          "error": {
            "type": "string",
            "example": "invalid_scope"
          },
          "error_description": {
            "type": "string",
            "example": "invalid scope"
          }
        }
      },
      "Invalid_grant_type": {
        "type": "object",
        "properties": {
          "error": {
            "type": "string",
            "example": "unsupported_grant_type"
          },
          "error_description": {
            "type": "string",
            "example": "invalid grant_type"
          }
        }
      },
      "Invalid_refresh_token": {
        "type": "object",
        "properties": {
          "error": {
            "type": "string",
            "example": "invalid_request"
          },
          "error_description": {
            "type": "string",
            "example": "invalid refresh_token"
          }
        }
      },
      "Invalid_code": {
        "type": "object",
        "properties": {
          "error": {
            "type": "string",
            "example": "invalid_request"
          },
          "error_description": {
            "type": "string",
            "example": "invalid code"
          }
        }
      },
      "Invalid_access": {
        "type": "object",
        "properties": {
          "error": {
            "type": "string",
            "example": "invalid_request"
          },
          "error_description": {
            "type": "string",
            "example": "The resource owner denied the request"
          }
        }
      },
      "Invalid_credentials": {
        "type": "object",
        "properties": {
          "error": {
            "type": "string",
            "example": "unauthorized"
          },
          "error_description": {
            "type": "string",
            "example": "invalid credentials"
          }
        }
      },
      "Invalid_redirect_uri": {
        "type": "object",
        "properties": {
          "error": {
            "type": "string",
            "example": "invalid_request"
          },
          "error_description": {
            "type": "string",
            "example": "The redirect_uri did not match the registered redirect_uri for this application"
          }
        }
      },
      "Invalid_parameters": {
        "type": "object",
        "properties": {
          "timestamp": {
            "type": "number",
            "example": 1569851999383
          },
          "code": {
            "type": "string",
            "example": "API-4101-400"
          },
          "reason": {
            "type": "string",
            "example": "Cannot parse parameters"
          }
        }
      },
      "locations.locationHours": {
        "type": "object",
        "properties": {
          "Open24": {
            "type": "boolean",
            "description": "Indicates if the location is open 24 hours.",
            "example": false
          },
          "gmtOffset": {
            "type": "string",
            "description": "The timezone offset from GMT (UTC).",
            "example": "(UTC-05:00) Eastern Time (US Canada)"
          },
          "timezone": {
            "type": "string",
            "description": "The timezone of the location.",
            "example": "America/New_York"
          },
          "friday": {
            "$ref": "#/components/schemas/locations.dailyHours"
          },
          "monday": {
            "$ref": "#/components/schemas/locations.dailyHours"
          },
          "saturday": {
            "$ref": "#/components/schemas/locations.dailyHours"
          },
          "sunday": {
            "$ref": "#/components/schemas/locations.dailyHours"
          },
          "thursday": {
            "$ref": "#/components/schemas/locations.dailyHours"
          },
          "tuesday": {
            "$ref": "#/components/schemas/locations.dailyHours"
          },
          "wednesday": {
            "$ref": "#/components/schemas/locations.dailyHours"
          }
        }
      },
      "locations.geoLocation": {
        "type": "object",
        "properties": {
          "latLng": {
            "type": "string",
            "description": "The latitude and longitude of the location.",
            "example": "39.3110881,-84.2751167"
          },
          "latitude": {
            "type": "number",
            "description": "The latitude of the location.",
            "example": 39.3110881
          },
          "longitude": {
            "type": "number",
            "description": "The longitude of the location.",
            "example": -84.2751167
          }
        }
      },
      "locations.dailyHours": {
        "type": "object",
        "properties": {
          "open": {
            "type": "string",
            "description": "The time the department or location opens.",
            "example": "05:00"
          },
          "close": {
            "type": "string",
            "description": "The time the department or location opens.",
            "example": 1380
          },
          "open24": {
            "type": "boolean",
            "description": "Indicates if the location or department is open 24 hours.",
            "example": false
          }
        }
      },
      "locations.location": {
        "type": "object",
        "properties": {
          "address": {
            "$ref": "#/components/schemas/locations.address"
          },
          "chain": {
            "type": "string",
            "description": "The name of the chain.",
            "example": "KROGER"
          },
          "phone": {
            "type": "string",
            "description": "The phone number of the location.",
            "example": "5551234567"
          },
          "departments": {
            "type": "array",
            "description": "The available departments at the location.",
            "items": {
              "$ref": "#/components/schemas/locations.departmentAtLocation"
            }
          },
          "geolocation": {
            "$ref": "#/components/schemas/locations.geoLocation"
          },
          "hours": {
            "$ref": "#/components/schemas/locations.locationHours"
          },
          "locationId": {
            "type": "string",
            "description": "The 3-digit management division number followed by the 5-digit store number.",
            "example": "01400376"
          },
          "name": {
            "type": "string",
            "description": "The name of the location. The name generally consists of the chain followed by a vanity name.",
            "example": "Kroger Landen"
          }
        }
      },
      "locations.locationResponse": {
        "type": "object",
        "properties": {
          "data": {
            "$ref": "#/components/schemas/locations.location"
          },
          "meta": {
            "$ref": "#/components/schemas/MetaModel"
          }
        }
      },
      "locations.locationSearchResponse": {
        "type": "object",
        "properties": {
          "data": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/locations.location"
            }
          },
          "meta": {
            "$ref": "#/components/schemas/MetaModel"
          }
        }
      },
      "locations.department": {
        "type": "object",
        "properties": {
          "departmentId": {
            "type": "string",
            "description": "The 2-digit department code.",
            "example": "01"
          },
          "name": {
            "type": "string",
            "description": "The name of the department.",
            "example": "Drug & General Merchandise"
          }
        }
      },
      "locations.departmentResponse": {
        "type": "object",
        "properties": {
          "data": {
            "$ref": "#/components/schemas/locations.department"
          },
          "meta": {
            "type": "object",
            "properties": {}
          }
        }
      },
      "locations.departmentAtLocation": {
        "type": "object",
        "properties": {
          "departmentId": {
            "type": "string",
            "description": "The 2-digit department code.",
            "example": "01"
          },
          "name": {
            "type": "string",
            "description": "The name of the department.",
            "example": "Drug & General Merchandise"
          },
          "phone": {
            "type": "string",
            "description": "The phone number of the department.",
            "example": "5551234567"
          },
          "hours": {
            "$ref": "#/components/schemas/locations.departmentHours"
          }
        }
      },
      "locations.chain": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "description": "The name of the chain.",
            "example": "KROGER"
          },
          "divisionNumbers": {
            "type": "array",
            "description": "A list of all management division numbers within this brand.",
            "example": [
              "01",
              "02"
            ],
            "items": {
              "type": "string"
            }
          }
        }
      },
      "locations.departmentsResponse": {
        "type": "object",
        "properties": {
          "data": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/locations.department"
            }
          },
          "meta": {
            "$ref": "#/components/schemas/MetaModel"
          }
        }
      },
      "locations.chainResponse": {
        "type": "object",
        "properties": {
          "data": {
            "$ref": "#/components/schemas/locations.chain"
          },
          "meta": {
            "type": "object",
            "properties": {}
          }
        }
      },
      "locations.departmentHours": {
        "type": "object",
        "properties": {
          "Open24": {
            "type": "boolean",
            "description": "Indicates if the department is open 24 hours.",
            "example": false
          },
          "monday": {
            "$ref": "#/components/schemas/locations.dailyHours"
          },
          "tuesday": {
            "$ref": "#/components/schemas/locations.dailyHours"
          },
          "wednesday": {
            "$ref": "#/components/schemas/locations.dailyHours"
          },
          "thursday": {
            "$ref": "#/components/schemas/locations.dailyHours"
          },
          "friday": {
            "$ref": "#/components/schemas/locations.dailyHours"
          },
          "saturday": {
            "$ref": "#/components/schemas/locations.dailyHours"
          },
          "sunday": {
            "$ref": "#/components/schemas/locations.dailyHours"
          }
        }
      },
      "locations.address": {
        "type": "object",
        "properties": {
          "addressLine1": {
            "type": "string",
            "description": "The street address of the location.",
            "example": "2900 W. St. Rt. 22 & 3"
          },
          "addressLine2": {
            "type": "string",
            "description": "An optional secondary address of the location.",
            "example": ""
          },
          "city": {
            "type": "string",
            "description": "The city of the location.",
            "example": "Maineville"
          },
          "county": {
            "type": "string",
            "description": "The county of the location.",
            "example": "WARREN COUNTY"
          },
          "state": {
            "type": "string",
            "description": "The state, province, or regional of the location. US locations use a two-letter codes for states. for US states",
            "example": "OH"
          },
          "zipCode": {
            "type": "string",
            "description": "The postal code of the location.",
            "example": "45039"
          }
        }
      },
      "locations.chainsResponse": {
        "type": "object",
        "properties": {
          "data": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/locations.chain"
            }
          },
          "meta": {
            "$ref": "#/components/schemas/MetaModel"
          }
        }
      },
      "MetaModel": {
        "type": "object",
        "properties": {
          "pagination": {
            "type": "object",
            "properties": {
              "total": {
                "type": "number"
              },
              "start": {
                "type": "number"
              },
              "limit": {
                "type": "number"
              }
            }
          },
          "warnings": {
            "type": "array",
            "items": {
              "type": "string"
            }
          }
        }
      },
      "MetadataModel": {
        "type": "object",
        "properties": {
          "page": {
            "type": "integer"
          },
          "pageSize": {
            "type": "integer"
          },
          "totalCount": {
            "type": "integer"
          },
          "totalPages": {
            "type": "integer"
          }
        }
      },
      "oauth2.authTokenResponse": {
        "type": "object",
        "properties": {
          "expires_in": {
            "type": "number",
            "description": "The number of seconds the access token is valid.",
            "example": 1800
          },
          "access_token": {
            "type": "string",
            "description": "Default Expiration Time: 1800 seconds (30 minutes)",
            "example": "eyJh5GciOiJSUzI1NiGsImtpZCI6Ilo0RnQzbXNrSUj4OGlydDdMQjVjNmc2PSIsInR5cCI6IkpXVmJ9.eqJzY29wZSI6InByb2T1Y3QuY29tcGFjdCBjb3Vwb24uYmFzaWMiLCJhdXRoQXQiOjE1NjUwOTk0OTUzMzIzOTIxMTIsImF1ZCI6InBlcmsvcm1hbmNlLWFnZW50LXB1YmxpYyIsImV4cCI6MTU2NTEwMTI5NSwiaWF0IjoxNTY1MDk5BDkwLCJpc3MiOiJhcGkua3JvZ2VyLmNvbSIsInN1YiI6IjBmZjdkMGIwLWVkOGItNDJmOS1hNTExLWEzMGQyYTAyZDljNSJ9.ej0mov6SGV4n4HiAvduTdYCceMlSo3T06M4Nfh3MfpIjSKzKaLWgd5S0W1EKDXrWz8IE7NTg8EIrL-WKhwdZPt-TWaS7LLjRXLJ0w5rKc44DStgBdvDiCcnKeMsnimjhBlHOiiKUV5y3GbVqJzaDVZwg0j8lP9qtwZP9EIIQ7k409nkskY1pz7l1lZrGotYRJKmnteN5vVQeZ3R8jywIwOOSEbKSgQALVA3Oj02964P7lI6h1GsZ66V5FLA9KU8QXm4ejrFHf1beAIA2zi_fQI3dmW7yj57pWoCECZIjq7Sfo3nGR5rkjEwfyXEK7aTn8oj4_14YHgKRTY-28L96cw"
          },
          "token_type": {
            "type": "string",
            "description": "",
            "example": "bearer"
          },
          "refresh_token": {
            "type": "string",
            "description": "Default Expiration Time: 15,768,000 seconds (6 months)",
            "example": "FN20LbaF2EWC6MPMWdemBwwnP4ZmX8"
          }
        }
      },
      "oauth2.codeResponse": {
        "type": "string",
        "description": "Your registered redirect with the authorization code appended to the URL.",
        "example": "https://YourRedirectUri.com/callback?code=zWrT1GkdshSadIowJW0Rm4w2kKhOzv1W"
      },
      "products.productBoxedDimensionsModel": {
        "type": "object",
        "description": "Information about the product's size.",
        "properties": {
          "depth": {
            "type": "string",
            "description": "The depth of the product.",
            "example": "3.5"
          },
          "height": {
            "type": "string",
            "description": "The height of the product.",
            "example": "2.0"
          },
          "width": {
            "type": "string",
            "description": "The length of the product.",
            "example": "4.75"
          }
        }
      },
      "products.productPayloadModel": {
        "type": "object",
        "properties": {
          "data": {
            "$ref": "#/components/schemas/products.productModel"
          },
          "meta": {
            "$ref": "#/components/schemas/MetaModel"
          }
        }
      },
      "products.productTemperatureModel": {
        "type": "object",
        "description": "Information about the item's temperature requirements.",
        "properties": {
          "indicator": {
            "type": "string",
            "description": "Information about the product's storage temperature.",
            "example": "Refrigerated"
          },
          "heatSensitive": {
            "type": "boolean",
            "description": "Indicates if the item is heat sensitive."
          }
        }
      },
      "products.productImageSizeModel": {
        "type": "object",
        "description": "Information about the product's image.",
        "properties": {
          "id": {
            "type": "string",
            "description": "An optional identifier of the image size.",
            "example": "7df2d0a3-8349-44d4-9512-1dab89e675a9"
          },
          "size": {
            "type": "string",
            "description": "A description of the image size.",
            "example": "medium"
          },
          "url": {
            "type": "string",
            "description": "The URL location of the image.",
            "example": "https://www.kroger.com/product/images/medium/front/0001111041700"
          }
        }
      },
      "products.productImageModel": {
        "type": "object",
        "description": "Information about the product's image.",
        "properties": {
          "id": {
            "type": "string",
            "description": "An optional identifier of the image."
          },
          "perspective": {
            "type": "string",
            "description": "A description of the product images view.",
            "example": "front"
          },
          "default": {
            "type": "boolean"
          },
          "sizes": {
            "type": "array",
            "description": "An array of images sizes.",
            "items": {
              "$ref": "#/components/schemas/products.productImageSizeModel"
            }
          }
        }
      },
      "products.productItemInventoryModel": {
        "type": "object",
        "properties": {
          "stockLevel": {
            "type": "string",
            "enum": [
              "HIGH",
              "LOW",
              "TEMPORARILY_OUT_OF_STOCK"
            ],
            "description": "Indicates the level of stock.",
            "example": "HIGH"
          }
        }
      },
      "products.productItemFulfillmentModel": {
        "type": "object",
        "properties": {
          "curbside": {
            "type": "boolean",
            "description": "Indicates if the product is available for curbside pickup."
          },
          "delivery": {
            "type": "boolean",
            "description": "Indicates if the product is available for home delivery."
          },
          "instore": {
            "type": "boolean",
            "description": "Indicates if the product is available in store. This does not indicate that the item is in stock."
          },
          "shiptohome": {
            "type": "boolean",
            "description": "Indicates if the product is available to be shipped from a fulfillment center."
          }
        }
      },
      "products.productItemPriceModel": {
        "type": "object",
        "properties": {
          "regular": {
            "type": "number",
            "description": "The regular price of the item.",
            "example": 1.99
          },
          "promo": {
            "type": "number",
            "description": "The sale price of the item.",
            "example": 1.59
          },
          "regularPerUnitEstimate": {
            "type": "number",
            "description": "The estimated price of 1 unit of the item.",
            "example": 1.99
          },
          "promoPerUnitEstimate": {
            "type": "number",
            "description": "The estimated sale price of 1 unit of the item.",
            "example": 1.59
          }
        }
      },
      "products.productAisleLocationModel": {
        "type": "object",
        "properties": {
          "bayNumber": {
            "type": "string",
            "description": "The bay number in the aisle.",
            "example": "13"
          },
          "description": {
            "type": "string",
            "description": "The location in the store.",
            "example": "Aisle 35"
          },
          "number": {
            "type": "string",
            "description": "The aisle number in the store.",
            "example": "35"
          },
          "numberOfFacings": {
            "type": "string",
            "description": "The number of facings.",
            "example": "5"
          },
          "sequenceNumber": {
            "type": "string",
            "description": "The sequence of the aisle in the store.",
            "example": "3"
          },
          "side": {
            "type": "string",
            "description": "The side of the aisle where the product is located.",
            "example": "L"
          },
          "shelfNumber": {
            "type": "string",
            "description": "The shelf number in the aisle.",
            "example": "2"
          },
          "shelfPositionInBay": {
            "type": "string",
            "description": "The position of the shelf in the bay.",
            "example": "1"
          }
        }
      },
      "products.productsPayloadModel": {
        "type": "object",
        "properties": {
          "data": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/products.productModel"
            }
          },
          "meta": {
            "$ref": "#/components/schemas/MetaModel"
          }
        }
      },
      "products.productModel": {
        "type": "object",
        "properties": {
          "productId": {
            "type": "string",
            "description": "The UPC of the product.",
            "example": "0001111041700"
          },
          "aisleLocations": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/products.productAisleLocationModel"
            }
          },
          "brand": {
            "type": "string",
            "description": "The brand name of the product.",
            "example": "Kroger"
          },
          "categories": {
            "type": "array",
            "description": "The category the product belongs to.",
            "items": {
              "type": "string",
              "example": "Dairy"
            }
          },
          "countryOrigin": {
            "type": "string",
            "description": "The country of origin of the product.",
            "example": "United States"
          },
          "description": {
            "type": "string",
            "description": "The name of the product.",
            "example": "Kroger 2% Reduced Fat Milk"
          },
          "items": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/products.productItemModel"
            }
          },
          "itemInformation": {
            "$ref": "#/components/schemas/products.productBoxedDimensionsModel"
          },
          "temperature": {
            "$ref": "#/components/schemas/products.productTemperatureModel"
          },
          "images": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/products.productImageModel"
            }
          },
          "upc": {
            "type": "string",
            "description": "The UPC of the product",
            "example": "0001111041700"
          }
        }
      },
      "products.productItemModel": {
        "type": "object",
        "properties": {
          "itemId": {
            "type": "string",
            "description": "The UPC of the product.",
            "example": "0001111041700"
          },
          "inventory": {
            "$ref": "#/components/schemas/products.productItemInventoryModel"
          },
          "favorite": {
            "type": "boolean"
          },
          "fulfillment": {
            "$ref": "#/components/schemas/products.productItemFulfillmentModel"
          },
          "price": {
            "$ref": "#/components/schemas/products.productItemPriceModel"
          },
          "nationalPrice": {
            "$ref": "#/components/schemas/products.productItemPriceModel"
          },
          "size": {
            "type": "string",
            "description": "A description of product's size.",
            "example": "1 gal"
          },
          "soldBy": {
            "type": "string",
            "description": "Indicates how this item is sold. Values returned are typically either \"weight\" or \"unit\"",
            "example": "unit"
          }
        }
      },
      "productId": {
        "type": "string",
        "description": "The productId of the product to return.",
        "maxLength": 13,
        "minLength": 13,
        "maximum": 200
      },
      "refresh_token": {
        "required": [
          "refresh_token",
          "grant_type"
        ],
        "type": "object",
        "properties": {
          "grant_type": {
            "type": "string",
            "description": "Must be `refresh_token`.",
            "example": "refresh_token"
          },
          "refresh_token": {
            "type": "string",
            "description": "The refresh token returned from the server.",
            "example": "FN20LbaF2EWC6MPMWdemBwwnP4ZmX8"
          }
        }
      },
      "refresh_tokenResponse": {
        "type": "object",
        "properties": {
          "expires_in": {
            "type": "number",
            "description": "The number of seconds the access token is valid.",
            "example": 1800
          },
          "access_token": {
            "type": "string",
            "description": "Default Expiration Time: 1800 seconds (30 minutes)",
            "example": "eyJh5GciOiJSUzI1NiGsImtpZCI6Ilo0RnQzbXNrSUj4OGlydDdMQjVjNmc2PSIsInR5cCI6IkpXVmJ9.eqJzY29wZSI6InByb2T1Y3QuY29tcGFjdCBjb3Vwb24uYmFzaWMiLCJhdXRoQXQiOjE1NjUwOTk0OTUzMzIzOTIxMTIsImF1ZCI6InBlcmsvcm1hbmNlLWFnZW50LXB1YmxpYyIsImV4cCI6MTU2NTEwMTI5NSwiaWF0IjoxNTY1MDk5BDkwLCJpc3MiOiJhcGkua3JvZ2VyLmNvbSIsInN1YiI6IjBmZjdkMGIwLWVkOGItNDJmOS1hNTExLWEzMGQyYTAyZDljNSJ9.ej0mov6SGV4n4HiAvduTdYCceMlSo3T06M4Nfh3MfpIjSKzKaLWgd5S0W1EKDXrWz8IE7NTg8EIrL-WKhwdZPt-TWaS7LLjRXLJ0w5rKc44DStgBdvDiCcnKeMsnimjhBlHOiiKUV5y3GbVqJzaDVZwg0j8lP9qtwZP9EIIQ7k409nkskY1pz7l1lZrGotYRJKmnteN5vVQeZ3R8jywIwOOSEbKSgQALVA3Oj02964P7lI6h1GsZ66V5FLA9KU8QXm4ejrFHf1beAIA2zi_fQI3dmW7yj57pWoCECZIjq7Sfo3nGR5rkjEwfyXEK7aTn8oj4_14YHgKRTY-28L96cw"
          },
          "token_type": {
            "type": "string",
            "description": "",
            "example": "bearer"
          },
          "refresh_token": {
            "type": "string",
            "description": "Default Expiration Time: 15,768,000 seconds (6 months)",
            "example": "FN20LbaF2EWC6MPMWdemBwwnP4ZmX8"
          }
        }
      },
      "RootCauseModel": {
        "type": "object",
        "properties": {
          "root_cause": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ErrorModel"
            }
          }
        }
      },
      "UPC": {
        "type": "string",
        "description": "The UPC of the product to return.",
        "maxLength": 13,
        "minLength": 13,
        "maximum": 200
      }
    },
    "securitySchemes": {
      "ClientContext": {
        "type": "oauth2",
        "description": "When making API requests that do not require customer consent, you can use \nthe [Client Credentials Grant Type](#client-credentials-grant) to authenticate your OAuth2 \napplication.\n",
        "flows": {
          "clientCredentials": {
            "tokenUrl": "https://api.kroger.com/v1/connect/oauth2/token",
            "scopes": {
              "product.compact": "Grants read access to general product information.",
              "N/A": "No scope required."
            }
          }
        }
      },
      "CustomerContext": {
        "type": "oauth2",
        "description": "When making an API request that is either returning personalized customer \ndata or acting on behalf of a customer, the customer's consent \nis required using the [Authorization Code Grant Type](#authorization-code-grant).\n",
        "flows": {
          "authorizationCode": {
            "authorizationUrl": "https://api.kroger.com/v1/connect/oauth2/authorize",
            "tokenUrl": "https://api.kroger.com/v1/connect/oauth2/token",
            "scopes": {
              "profile.compact": "Grants read access to a customer profile ID.",
              "cart.basic:write": "Grants write access to a customer's cart.",
              "product.compact": "Grants read access to general product information.",
              "N/A": "No scope required."
            }
          }
        }
      }
    }
  },
  "x-tagGroups": [
    {
      "name": "Authorization Endpoints",
      "tags": [
        "OAuth2"
      ]
    },
    {
      "name": "API Reference",
      "tags": [
        "Identity",
        "Cart",
        "Products",
        "Locations"
      ]
    }
  ]
}